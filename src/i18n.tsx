import React, { createContext, useContext, useEffect, useState } from 'react';
import { getLanguage, setLanguage, Lang } from './settings';

type Dict = Record<string, string>;
const resources: Record<Lang, Dict> = {
  ja: {
    Today: 'Today',
    Routines: 'Routines',
    Log: 'Log',
    Settings: '設定',
    Day: '今日',
    Week: '週',
    Month: '月',
    Export: 'エクスポート',
    Import: 'インポート',
    Copy: 'コピー',
    Close: '閉じる',
    Language: '言語',
    Theme: 'テーマ',
    System: 'システム',
    Light: 'ライト',
    Dark: 'ダーク',
    DataExportDesc: '以下のJSONを保存してください',
    DataImportDesc: 'JSONを貼り付けてインポート',
    ConfirmImport: 'このデータで上書きします。よろしいですか？',
    StartReorder: '並べ替え',
    All: 'すべて',
    FlagOnly: '⚑のみ',
    Total: '合計',
    Planned: '予定',
    Actual: '実績',
    Remaining: '残り',
    Achievement: '達成率',
    ETA: '終了予定',
    Stop: '停止',
    Skip: 'スキップ',
    Break: '休憩',
    NextTask: '次のタスク',
    Start: '開始',
    Edit: '編集',
    Save: '保存',
    Delete: '削除',
    Unassigned: '未割り当て',
    OpenURL: 'URLを開く',
    Cancel: 'キャンセル',
    NoteOptional: 'メモ（任意）',
    StopAndSave: '停止して保存',
    NoRoutines: 'ルーティンがありません。右下の＋から追加してください。',
    NewRoutine: '新規ルーティン',
    Title: 'タイトル',
    PlannedMinutes: '予定(分)',
    PlannedStartOptional: '予定開始 (HH:mm 任意)',
    ProjectOptional: 'プロジェクト（任意）',
    Add: '追加',
    NoLogs: 'まだログがありません。',
    TodayShort: '今日',
    Last7Days: '直近7日',
    Last30Days: '直近30日',
    ByProjectAggregation: 'プロジェクト別 集計（実績/予定/差分）',
    ResumePrev: '前のタスクを再開しますか？',
    No: 'しない',
    Resume: '再開する',
    Action: 'アクション',
    DataLoadFailed: 'データを読み込めませんでした',
    FinishAction: 'アクションを終了',
    StartAction: 'アクションを開始',
    StartTime: '開始時刻',
    EndTime: '終了時刻',
    PlannedTime: '予想時間',
    ScheduledDate: 'スケジュール日',
    Project: 'プロジェクト',
    SectionLabel: 'セクション',
    NotSet: '未設定',
    NotesOnFinish: 'メモ（終了時に保存）',
    EditAction: 'アクション編集',
    ActionName: 'アクション名',
    SectionAuto: 'セクション（自動割当）',
    ManageSections: 'セクションを管理',
    SectionManager: 'セクション管理',
    Name: '名前',
    StartHHmm: '開始 HH:mm',
    EndHHmm: '終了 HH:mm',
    AddSingleTask: '単発タスクを追加',
    AddTasksHint: '右下の＋から今日のタスクを追加してください（ルーティンのテンプレはRoutinesで展開）。',
    Error: 'エラー',
    ActionNameRequired: 'アクション名は必須です',
    ScheduledTimeFormat: '開始予定はHH:mm',
    LifeLog: 'ライフログ',
    WeekTimeline: '1週間のタイムライン',
  },
  en: {
    Today: 'Today',
    Routines: 'Routines',
    Log: 'Log',
    Settings: 'Settings',
    Day: 'Day',
    Week: 'Week',
    Month: 'Month',
    Export: 'Export',
    Import: 'Import',
    Copy: 'Copy',
    Close: 'Close',
    Language: 'Language',
    Theme: 'Theme',
    System: 'System',
    Light: 'Light',
    Dark: 'Dark',
    DataExportDesc: 'Copy JSON below to backup',
    DataImportDesc: 'Paste JSON to import',
    ConfirmImport: 'Overwrite with this data. Continue?',
    StartReorder: 'Reorder',
    All: 'All',
    FlagOnly: 'Flag only',
    Total: 'Total',
    Planned: 'Planned',
    Actual: 'Actual',
    Remaining: 'Remaining',
    Achievement: 'Achievement',
    ETA: 'ETA',
    Stop: 'Stop',
    Skip: 'Skip',
    Break: 'Break',
    NextTask: 'Next task',
    Start: 'Start',
    Edit: 'Edit',
    Save: 'Save',
    Delete: 'Delete',
    Unassigned: 'Unassigned',
    OpenURL: 'Open URL',
    Cancel: 'Cancel',
    NoteOptional: 'Notes (optional)',
    StopAndSave: 'Stop and Save',
    NoRoutines: 'No routines. Tap + to add.',
    NewRoutine: 'New Routine',
    Title: 'Title',
    PlannedMinutes: 'Planned (min)',
    PlannedStartOptional: 'Planned start (HH:mm optional)',
    ProjectOptional: 'Project (optional)',
    Add: 'Add',
    NoLogs: 'No logs yet.',
    TodayShort: 'Today',
    Last7Days: 'Last 7 days',
    Last30Days: 'Last 30 days',
    ByProjectAggregation: 'By project (actual/planned/diff)',
    ResumePrev: 'Resume the previous task?',
    No: 'No',
    Resume: 'Resume',
    Action: 'Action',
    DataLoadFailed: 'Failed to load data',
    FinishAction: 'Finish action',
    StartAction: 'Start action',
    StartTime: 'Start time',
    EndTime: 'End time',
    PlannedTime: 'Planned time',
    ScheduledDate: 'Scheduled date',
    Project: 'Project',
    SectionLabel: 'Section',
    NotSet: 'Not set',
    NotesOnFinish: 'Notes (saved on finish)',
    EditAction: 'Edit action',
    ActionName: 'Action name',
    SectionAuto: 'Section (auto)',
    ManageSections: 'Manage sections',
    SectionManager: 'Section manager',
    Name: 'Name',
    StartHHmm: 'Start HH:mm',
    EndHHmm: 'End HH:mm',
    AddSingleTask: 'Add single task',
    AddTasksHint: 'Tap + to add today\'s tasks (expand templates in Routines).',
    Error: 'Error',
    ActionNameRequired: 'Action name is required',
    ScheduledTimeFormat: 'Start time must be HH:mm',
    LifeLog: 'Life Log',
    WeekTimeline: 'Week timeline',
  },
};

type Ctx = { lang: Lang; setLang: (l: Lang) => Promise<void>; t: (k: string) => string };
const I18nContext = createContext<Ctx | undefined>(undefined);

export const I18nProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [lang, setLangState] = useState<Lang>('ja');
  useEffect(() => {
    (async () => setLangState(await getLanguage()))();
  }, []);
  const setLang = async (l: Lang) => { setLangState(l); await setLanguage(l); };
  const t = (k: string) => resources[lang]?.[k] ?? k;
  return <I18nContext.Provider value={{ lang, setLang, t }}>{children}</I18nContext.Provider>;
};

export function useI18n() {
  const ctx = useContext(I18nContext);
  if (!ctx) throw new Error('useI18n must be used within I18nProvider');
  return ctx;
}
